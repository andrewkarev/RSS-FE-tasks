{"version":3,"file":"main.76919bac6962588d632a.js","mappings":"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","sources":["webpack:///./components/app-state.ts","webpack:///./components/api.ts","webpack:///./components/UI.ts","webpack:///./components/app-render.ts","webpack:///./components/app-elements.ts","webpack:///./components/utils.ts","webpack:///./components/pagination.ts","webpack:///./components/pages-controls.ts","webpack:///./components/car-manager.ts","webpack:///./components/winners-table.ts","webpack:///./components/engine-controls.ts","webpack:///./components/race-controls.ts","webpack:///./index.ts"],"sourcesContent":["import IState from './interfaces/IState';\r\n\r\nconst state: IState = {\r\n  carsBrands: [\r\n    'Tesla',\r\n    'Aston Martin',\r\n    'Rolls-Royce',\r\n    'Ferrari',\r\n    'Lamborghini',\r\n    'Porsche',\r\n    'Maserati',\r\n    'Ford',\r\n    'Mercedes',\r\n    'Audi',\r\n  ],\r\n  carsModels: [\r\n    'Model S',\r\n    'DBS',\r\n    'Phantom (VII)',\r\n    'Roma',\r\n    'huracan',\r\n    'Carrera GT',\r\n    'GranTurismo',\r\n    'Mustang Shelby GT 500',\r\n    'AMG GT',\r\n    'R8',\r\n  ],\r\n  carsInGarage: 0,\r\n  winnersAtAll: 0,\r\n  carsPerPageLimit: 7,\r\n  winnersPerPageLimit: 10,\r\n  selectedCarId: 0,\r\n  currentGaragePage: 1,\r\n  currentWinnersPage: 1,\r\n  currentPage: 'garage',\r\n  carsAnimationId: {},\r\n  carsOnPage: [],\r\n  raceWinnerId: 0,\r\n  isRace: false,\r\n  paginationButtonsState: {\r\n    prevIsActive: false,\r\n    nextIsActive: false,\r\n  },\r\n  sortBy: 'time',\r\n  order: 'ASC',\r\n  winsOrder: 'ASC',\r\n  timeOrder: 'ASC',\r\n};\r\n\r\nexport default state;\r\n","import Cars from './types/Cars';\r\nimport Winners from './types/Winners';\r\nimport ICar from './interfaces/ICar';\r\nimport IEngine from './interfaces/IEngine';\r\nimport IDriveMode from './interfaces/IDriveMode';\r\nimport IWinner from './interfaces/IWinner';\r\n\r\nconst BASE_URL = 'http://localhost:3000';\r\n\r\nconst GARAGE = `${BASE_URL}/garage`;\r\nconst ENGINE = `${BASE_URL}/engine`;\r\nconst WINNERS = `${BASE_URL}/winners`;\r\n\r\nexport const getCars = async (page = 1, limit = 7): Cars => {\r\n  const queryURL = `${GARAGE}?_page=${page}&_limit=${limit}`;\r\n\r\n  try {\r\n    const response = await fetch(queryURL);\r\n    const cars = await response.json() as ICar[];\r\n    const carsCount = response.headers.get('X-Total-Count');\r\n    const count = Number(carsCount);\r\n\r\n    if (response.status === 200) return { cars, count };\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getCar = async (id: number): Promise<ICar | null> => {\r\n  try {\r\n    const response = await fetch(`${GARAGE}/${id}`);\r\n    const data = await response.json() as ICar;\r\n\r\n    if (response.status === 200) return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const createCar = async (body: Partial<ICar>): Promise<ICar | null> => {\r\n  try {\r\n    const response = await fetch(GARAGE, {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const data = await response.json() as ICar;\r\n    if (response.status === 201) return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const deleteCar = async (id: number): Promise<void> => {\r\n  try {\r\n    await fetch(`${GARAGE}/${id}`, { method: 'DELETE' });\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const updateCar = async (id: number, body: Partial<ICar>): Promise<void> => {\r\n  try {\r\n    await fetch(`${GARAGE}/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const startEngine = async (id: number): Promise<IEngine | null> => {\r\n  try {\r\n    const response = await fetch(`${ENGINE}?id=${id}&status=started`, { method: 'PATCH' });\r\n    const data = await response.json() as IEngine;\r\n    if (response.status === 200) return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const stopEngine = async (id: number): Promise<IEngine | null> => {\r\n  try {\r\n    const response = await fetch(`${ENGINE}?id=${id}&status=stopped`, { method: 'PATCH' });\r\n    const data = await response.json() as IEngine;\r\n    if (response.status === 200) return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const switchEngineToDriveMode = async (id: number): Promise<IDriveMode | null> => {\r\n  try {\r\n    const response = await fetch(`${ENGINE}?id=${id}&status=drive`, { method: 'PATCH' });\r\n    const data = response.status === 200\r\n      ? await response.json() as IDriveMode\r\n      : { success: false };\r\n    return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getWinners = async (\r\n  page: number,\r\n  sort: string,\r\n  order: string,\r\n  limit = 10,\r\n): Winners => {\r\n  try {\r\n    const response = await fetch(`${WINNERS}?_page=${page}&_limit=${limit}&_sort=${sort}&_order=${order}`);\r\n    const winners = await response.json() as IWinner[];\r\n    const winnersCount = response.headers.get('X-Total-Count');\r\n    const count = Number(winnersCount);\r\n\r\n    if (response.status === 200) return { winners, count };\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getWinner = async (id: number): Promise<IWinner | null> => {\r\n  try {\r\n    const response = await fetch(`${WINNERS}/${id}`);\r\n    const data = await response.json() as IWinner;\r\n\r\n    if (response.status === 200) return data;\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const createwinner = async (body: IWinner): Promise<void> => {\r\n  try {\r\n    await fetch(WINNERS, {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const deleteWinner = async (id: number): Promise<void> => {\r\n  try {\r\n    await fetch(`${WINNERS}/${id}`, { method: 'DELETE' });\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const updateWinner = async (id: number, body: Partial<IWinner>): Promise<void> => {\r\n  try {\r\n    await fetch(`${WINNERS}/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error) throw new Error(error.message);\r\n  }\r\n};\r\n","const renderMenu = (): string => `\r\n  <div class=\"menu\">\r\n    <button class=\"menu__button button active\" id=\"button-garage\">Garage</button>\r\n    <button class=\"menu__button button\" id=\"button-winners\">Leaderboard</button>\r\n  </div>\r\n`;\r\n\r\nconst renderGarageMenu = (): string => `\r\n  <div class=\"garage__menu\">\r\n    <form class=\"garage__form\" id=\"create\">\r\n      <input class=\"garage__input\" id=\"create-model\" name=\"model\" type=\"text\">\r\n      <input class=\"garage__input\" id=\"create-color\" name=\"color\" type=\"color\">\r\n      <button class=\"garage__button button disabled\" id=\"button-create\" type=\"submit\" disabled>Create</button>\r\n    </form>\r\n    <form class=\"garage__form\" id=\"update\">\r\n      <input class=\"garage__input disabled\" id=\"update-model\" name=\"model\" type=\"text\" disabled>\r\n      <input class=\"garage__input disabled\" id=\"update-color\" name=\"color\" type=\"color\" disabled>\r\n      <button class=\"garage__button button disabled\" id=\"button-update\" type=\"submit\" disabled>Update</button>\r\n    </form>\r\n    <div class=\"garage__controls\">\r\n      <button class=\"garage__button garage__button-controls button\" id=\"button-race\" type=\"button\">Race</button>\r\n      <button class=\"garage__button garage__button-controls button disabled\" id=\"button-reset\" type=\"button\"\r\n        disabled>Reset</button>\r\n      <button class=\"garage__button garage__button-controls button\" id=\"button-generate\"\r\n        type=\"button\">Generate</button>\r\n    </div>\r\n  </div>\r\n`;\r\n\r\nexport const getCarImage = (color: string): string => `\r\n  <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"84\" height=\"42\"\r\n  viewBox=\"0 0 1280.000000 640.000000\" preserveAspectRatio=\"xMidYMid meet\">\r\n  <metadata>\r\n    Created by potrace 1.15, written by Peter Selinger 2001-2017\r\n  </metadata>\r\n  <g transform=\"translate(0.000000,640.000000) scale(0.100000,-0.100000)\" fill=\"${color}\" stroke=\"none\">\r\n    <path d=\"M3565 5336 c-106 -30 -101 -26 -108 -111 -4 -42 -9 -80 -12 -85 -6\r\n      -10 -246 -105 -590 -234 -448 -167 -1052 -415 -1173 -483 -78 -43 -193 -91\r\n      -250 -104 -23 -5 -98 -14 -165 -19 -67 -6 -167 -19 -222 -30 -154 -31 -340\r\n      -49 -563 -57 l-203 -6 -43 -66 c-59 -91 -60 -95 -26 -130 37 -37 38 -65 3\r\n      -150 -25 -62 -27 -78 -31 -256 l-4 -190 -38 -32 c-91 -78 -133 -209 -134 -418\r\n      0 -194 11 -396 26 -482 13 -71 14 -74 72 -122 69 -58 130 -129 158 -184 64\r\n      -126 534 -211 1384 -250 l92 -4 -6 119 c-6 142 8 256 49 383 112 352 394 622\r\n      756 722 90 26 112 28 278 28 165 0 188 -2 278 -27 201 -56 361 -152 504 -302\r\n      140 -145 222 -293 274 -492 21 -79 24 -109 23 -279 -1 -127 -6 -214 -16 -263\r\n      l-15 -73 3006 7 c1653 4 3007 8 3009 9 1 1 -8 37 -20 81 -19 67 -22 105 -22\r\n      259 -1 166 1 187 27 279 117 421 467 736 885 797 119 17 325 7 432 -21 239\r\n      -63 453 -205 601 -399 70 -92 154 -267 185 -386 24 -88 27 -119 27 -260 1\r\n      -116 -4 -181 -16 -234 -10 -41 -16 -75 -15 -76 2 -1 62 2 133 6 266 16 458 45\r\n      525 79 48 24 97 81 127 146 l24 52 -16 157 c-15 152 -15 163 4 284 63 388 50\r\n      680 -35 802 -134 193 -526 336 -1429 519 -737 149 -1322 209 -2033 210 -228 0\r\n      -226 0 -347 85 -187 131 -1045 607 -1471 815 -383 187 -788 281 -1439 332\r\n      -208 17 -1106 16 -1400 0 -121 -7 -314 -19 -430 -27 -302 -22 -286 -22 -341\r\n      10 -140 81 -187 94 -269 71z m1885 -333 c6 -37 38 -238 71 -446 32 -209 66\r\n      -422 75 -474 9 -52 15 -96 13 -97 -11 -9 -1699 29 -1951 44 -206 13 -417 36\r\n      -485 54 -98 26 -198 119 -249 231 -35 75 -36 172 -5 255 17 45 30 61 68 86 83\r\n      54 135 80 253 127 341 136 858 230 1460 267 269 16 270 16 511 18 l227 2 12\r\n      -67z m630 47 c264 -18 777 -110 1029 -186 186 -56 445 -188 756 -387 211 -134\r\n      274 -181 250 -185 -75 -12 -133 -50 -162 -106 -19 -35 -21 -136 -4 -179 l11\r\n      -27 -907 2 -906 3 -59 160 c-110 302 -298 878 -298 916 0 6 95 2 290 -11z\" />\r\n    <path d=\"M2633 3125 c-223 -40 -410 -141 -568 -306 -132 -138 -213 -283 -262\r\n      -467 -22 -83 -26 -119 -26 -247 -1 -169 10 -236 65 -382 87 -230 271 -436 493\r\n      -551 85 -44 178 -78 271 -98 107 -23 312 -23 419 1 392 84 699 375 802 761 23\r\n      86 26 120 27 254 1 158 -5 199 -46 330 -98 310 -355 567 -668 669 -150 50\r\n      -354 64 -507 36z m350 -301 c249 -56 457 -247 543 -499 25 -72 28 -95 28 -220\r\n      1 -153 -15 -228 -74 -345 -94 -186 -283 -337 -485 -386 -96 -24 -268 -24 -360\r\n      0 -320 84 -544 355 -562 681 -20 359 209 673 558 765 94 24 253 26 352 4z\" />\r\n    <path d=\"M2600 2697 c-36 -13 -85 -36 -109 -51 l-44 -28 116 -115 c81 -82 120\r\n      -114 131 -110 14 6 16 29 16 167 0 186 6 178 -110 137z\" />\r\n    <path d=\"M2920 2561 c0 -139 2 -162 16 -168 11 -4 50 28 130 108 l115 114 -28\r\n      22 c-34 28 -138 70 -193 79 l-40 7 0 -162z\" />\r\n    <path d=\"M2282 2448 c-28 -36 -92 -191 -92 -225 0 -10 34 -13 165 -13 151 0\r\n      165 1 165 18 0 15 -206 232 -221 232 -4 0 -11 -6 -17 -12z\" />\r\n    <path d=\"M3222 2351 c-62 -59 -112 -115 -112 -124 0 -15 17 -17 165 -17 131 0\r\n      165 3 165 13 0 40 -69 205 -95 227 -7 6 -48 -27 -123 -99z\" />\r\n    <path d=\"M2781 2332 c-12 -22 11 -62 34 -62 8 0 21 10 29 22 20 28 4 58 -29\r\n      58 -13 0 -29 -8 -34 -18z\" />\r\n    <path d=\"M2749 2161 c-32 -33 -37 -67 -14 -110 29 -57 104 -64 151 -14 53 57\r\n      9 153 -71 153 -27 0 -44 -8 -66 -29z\" />\r\n    <path d=\"M2570 2125 c-26 -32 13 -81 48 -59 24 16 27 45 6 61 -23 17 -39 16\r\n      -54 -2z\" />\r\n    <path d=\"M3006 2124 c-20 -19 -20 -38 -2 -54 23 -19 61 -8 64 18 7 44 -32 67\r\n      -62 36z\" />\r\n    <path d=\"M2190 1975 c0 -29 41 -140 72 -194 l31 -53 117 117 c71 71 116 123\r\n      113 131 -4 11 -40 14 -169 14 -141 0 -164 -2 -164 -15z\" />\r\n    <path d=\"M3110 1972 c0 -9 51 -68 114 -131 l114 -114 31 54 c30 51 71 165 71\r\n      195 0 11 -31 14 -165 14 -151 0 -165 -1 -165 -18z\" />\r\n    <path d=\"M2780 1901 c-7 -15 -5 -24 8 -41 32 -40 85 -4 62 41 -14 25 -56 25\r\n      -70 0z\" />\r\n    <path d=\"M2562 1697 c-61 -62 -112 -115 -112 -119 0 -18 208 -108 249 -108 7\r\n      0 11 54 11 164 0 140 -2 165 -16 170 -9 3 -16 6 -17 6 -1 0 -53 -51 -115 -113z\" />\r\n    <path d=\"M2933 1803 c-15 -6 -19 -333 -4 -333 46 0 251 88 251 108 0 9 -223\r\n      232 -230 231 -3 0 -11 -3 -17 -6z\" />\r\n    <path d=\"M10700 3119 c-390 -84 -696 -376 -797 -759 -31 -117 -41 -292 -24\r\n      -411 33 -227 150 -453 318 -609 267 -250 643 -344 993 -249 117 32 283 118\r\n      380 196 487 396 518 1128 67 1560 -97 93 -166 140 -290 198 -137 64 -235 86\r\n      -407 91 -120 3 -162 0 -240 -17z m445 -313 c238 -81 409 -258 486 -506 30 -96\r\n      33 -289 5 -388 -110 -400 -513 -637 -911 -536 -149 38 -313 147 -402 267 -176\r\n      238 -203 533 -71 797 34 69 60 103 138 180 77 78 111 104 181 139 129 65 207\r\n      81 364 77 109 -3 143 -7 210 -30z\" />\r\n    <path d=\"M10703 2700 c-54 -19 -153 -71 -153 -80 0 -3 51 -57 114 -119 80 -80\r\n      119 -112 130 -108 14 5 16 29 16 167 l0 160 -27 -1 c-16 0 -52 -9 -80 -19z\" />\r\n    <path d=\"M11020 2561 c0 -139 2 -162 16 -168 22 -8 247 216 234 232 -17 20\r\n      -163 84 -207 91 l-43 7 0 -162z\" />\r\n    <path d=\"M10366 2424 c-29 -44 -76 -165 -76 -194 0 -19 7 -20 165 -20 126 0\r\n      165 3 165 13 0 7 -51 63 -114 126 l-114 114 -26 -39z\" />\r\n    <path d=\"M11313 2348 c-61 -62 -109 -119 -106 -125 6 -15 333 -19 333 -4 0 45\r\n      -88 241 -108 241 -4 0 -57 -51 -119 -112z\" />\r\n    <path d=\"M10882 2338 c-17 -17 -15 -32 7 -52 16 -14 23 -15 41 -6 31 17 24 64\r\n      -10 68 -14 2 -31 -3 -38 -10z\" />\r\n    <path d=\"M10846 2159 c-68 -81 17 -194 110 -144 89 48 56 175 -46 175 -30 0\r\n      -44 -6 -64 -31z\" />\r\n    <path d=\"M10670 2126 c-19 -23 -8 -61 18 -64 44 -7 67 32 36 62 -19 20 -38 20\r\n      -54 2z\" />\r\n    <path d=\"M11106 2127 c-21 -16 -18 -45 7 -61 37 -23 77 35 41 61 -10 7 -21 13\r\n      -24 13 -3 0 -14 -6 -24 -13z\" />\r\n    <path d=\"M10290 1970 c0 -29 43 -141 74 -195 l28 -48 116 116 c81 81 113 120\r\n      109 131 -6 14 -29 16 -167 16 -152 0 -160 -1 -160 -20z\" />\r\n    <path d=\"M11207 1978 c-3 -7 47 -66 111 -130 l116 -118 27 43 c27 44 79 177\r\n      79 203 0 12 -28 14 -164 14 -122 0 -166 -3 -169 -12z\" />\r\n    <path d=\"M10881 1901 c-14 -25 -5 -48 20 -56 27 -9 51 13 47 44 -4 34 -51 43\r\n      -67 12z\" />\r\n    <path d=\"M10662 1697 c-61 -62 -112 -115 -112 -119 0 -20 201 -108 247 -108\r\n      10 0 13 34 13 164 0 140 -2 165 -16 170 -9 3 -16 6 -17 6 -1 0 -53 -51 -115\r\n      -113z\" />\r\n    <path d=\"M11033 1803 c-10 -3 -13 -47 -13 -169 0 -90 4 -164 8 -164 36 0 186\r\n      61 239 98 16 10 -216 242 -234 235z\" />\r\n  </g>\r\n  </svg>\r\n`;\r\n\r\nexport const renderTrackCar = (id: number, name: string, color: string): string => `\r\n  <div class=\"garage__track-car\" id =\"track-car-${id}\">\r\n  <div class=\"garage__car-controls\">\r\n    <button class=\"garage__button garage__button-options button\" id=\"button-select-${id}\" type=\"button\">Select</button>\r\n    <button class=\"garage__button garage__button-options button\" id=\"button-remove-${id}\" type=\"button\">Remove</button>\r\n    <p class=\"garage__car-name\" id=\"car-name-${id}\">${name}</p>\r\n  </div>\r\n  <div class=\"garage__track-road\">\r\n    <div class=\"garage__track-launch-pad\">\r\n      <div class=\"engine-controls\">\r\n        <button class=\"engine-button start-engine-button\" id=\"start-engine-car-${id}\">A</button>\r\n        <button class=\"engine-button stop-engine-button disabled\" id=\"stop-engine-car-${id}\" disabled>B</button>\r\n      </div>\r\n      <div class=\"garage__car\" id=\"car-${id}\">\r\n        ${getCarImage(color)}\r\n      </div>\r\n    </div>\r\n    <div class=\"garage__track-flag\" id=\"flag-${id}\">🏁</div>\r\n  </div>\r\n  </div>\r\n`;\r\n\r\nexport const renderGarageTrack = (carsAtAll: number, cars: string[], page = 1): string => `\r\n  <div class=\"garage__track\">\r\n    <h1 class=\"garage__track-title\">Garage &nbsp;<span id=\"garage-cars-count\">${carsAtAll}</span></h1>\r\n    <h2 class=\"garage__track-subtitle\">Page &nbsp; <span id=\"garage-page-count\">${page}</span></h2>\r\n    <div class=\"garage__track-cars\" id=\"cars\">\r\n      ${cars.join('')}\r\n    </div>\r\n  </div>\r\n`;\r\n\r\nexport const renderGarage = (garageTrack: string): string => `\r\n<div class=\"garage\" id=\"garage\">\r\n  ${renderGarageMenu()}\r\n  ${garageTrack}\r\n</div>\r\n`;\r\n\r\nexport const renderWinner = (\r\n  position: number,\r\n  image: string,\r\n  name: string,\r\n  wins: number,\r\n  time: number,\r\n  id: number,\r\n): string => `\r\n  <tr id=\"winner-${id}\">\r\n    <td class=\"winners__table-cell\">${position}</td>\r\n    <td class=\"winners__table-cell\">${image}</td>\r\n    <td class=\"winners__table-cell\">${name}</td>\r\n    <td class=\"winners__table-cell\">${wins}</td>\r\n    <td class=\"winners__table-cell\">${time} sec</td>\r\n  </tr>\r\n`;\r\n\r\nexport const renderWinners = (winners: string[], winnersAtAll: number, page = 1): string => `\r\n  <div class=\"winners\" id=\"winners\">\r\n    <h1 class=\"winners__title\">Winners &nbsp;<span id=\"winners-total-count\">${winnersAtAll}</span></h1>\r\n    <h2 class=\"winners__subtitle\">Page &nbsp; <span id=\"winners-page-count\">${page}</span></h2>\r\n    <table class=\"winners__table\">\r\n      <thead>\r\n        <tr>\r\n          <th class=\"winners__table-header-cell\">Number</th>\r\n          <th class=\"winners__table-header-cell\">Car</th>\r\n          <th class=\"winners__table-header-cell\">Name</th>\r\n          <th class=\"winners__table-button winners__table-header-cell\" id=\"sort-by-wins\">Wins</th>\r\n          <th class=\"winners__table-button winners__table-header-cell\" id=\"sort-by-time\">Best time</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody id=\"winning-cars\">\r\n      ${winners.join('')}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n`;\r\n\r\nconst renderPagination = (): string => `\r\n  <div class=\"pagination\">\r\n    <button class=\"pagination__button button\" id=\"button-prev\" type=\"button\">Prev</button>\r\n    <button class=\"pagination__button button\" id=\"button-next\" type=\"button\">Next</button>\r\n  </div>\r\n`;\r\n\r\nexport const renderWinningMessage = (name: string, time: number): HTMLElement => {\r\n  const message = document.createElement('div');\r\n  message.classList.add('winning-message');\r\n  message.id = 'winning-message';\r\n  message.innerHTML = `<p class=\"winning-message-content\">${name} finished first in ${time} sec</p>`;\r\n  return message;\r\n};\r\n\r\nexport const render = (garageView: string, winnersView: string): void => {\r\n  const rootElement = document.getElementById('body');\r\n  const content = renderMenu().concat(garageView, winnersView, renderPagination());\r\n\r\n  if (rootElement) rootElement.innerHTML = content;\r\n};\r\n","import * as API from './api';\r\nimport * as UI from './UI';\r\nimport state from './app-state';\r\n\r\nconst getCars = async (page = 1): Promise<{\r\n  cars: string[] | undefined;\r\n  count: number | undefined;\r\n}> => {\r\n  const garageStats = await API.getCars(page);\r\n  state.carsOnPage = garageStats?.cars || [];\r\n  const cars = garageStats?.cars.map((car) => UI.renderTrackCar(car.id, car.name, car.color));\r\n  const count = garageStats?.count;\r\n  return {\r\n    cars,\r\n    count,\r\n  };\r\n};\r\n\r\nconst getWinners = async (page = 1): Promise<{\r\n  winners: string[];\r\n  count: number | undefined;\r\n}> => {\r\n  const winnersStats = await API.getWinners(page, state.sortBy, state.order);\r\n  const winnersResponse = winnersStats?.winners\r\n    .map(async (winner, i) => {\r\n      const car = await API.getCar(winner.id);\r\n      const color = car?.color ? car?.color : '#ffffff';\r\n      const image = UI.getCarImage(color);\r\n      const name = car?.name ? car?.name : 'Tesla Model S';\r\n      return UI.renderWinner(i + 1, image, name, winner.wins, winner.time, winner.id);\r\n    });\r\n  let winnersItems: string[] = [];\r\n\r\n  if (winnersResponse) winnersItems = await Promise.all(winnersResponse);\r\n\r\n  const winners = winnersItems;\r\n  const count = winnersStats?.count;\r\n  return {\r\n    winners,\r\n    count,\r\n  };\r\n};\r\n\r\nconst getGarageContent = async (page: number): Promise<string> => {\r\n  const { cars, count: carsCount } = await getCars(page);\r\n  const garageTrack = UI.renderGarageTrack(carsCount || 0, cars || [], page);\r\n  const garageView = UI.renderGarage(garageTrack);\r\n  state.carsInGarage = carsCount || 0;\r\n\r\n  return garageView;\r\n};\r\n\r\nconst getWinnersContent = async (page: number): Promise<string> => {\r\n  const { winners, count: winnersCount } = await getWinners(page);\r\n  const winnersView = UI.renderWinners(winners || [], winnersCount || 0, page);\r\n  state.winnersAtAll = winnersCount || 0;\r\n\r\n  return winnersView;\r\n};\r\n\r\nconst renderApp = async (page = 1): Promise<void> => {\r\n  const garageView = await getGarageContent(page);\r\n  const winnersView = await getWinnersContent(page);\r\n\r\n  UI.render(garageView, winnersView);\r\n};\r\n\r\nexport {\r\n  renderApp, getCars, getWinners, getWinnersContent,\r\n};\r\n","import Elements from './types/Elements';\r\n\r\nconst appElements: Elements = {\r\n  raceButton: null,\r\n  resetButton: null,\r\n  generateButton: null,\r\n  root: null,\r\n  sortByWinsButton: null,\r\n  sortByTimeButton: null,\r\n  createButton: null,\r\n  createModelInput: null,\r\n  createColorInput: null,\r\n  carsCounter: null,\r\n  updateButton: null,\r\n  updateModelInput: null,\r\n  updateColorInput: null,\r\n  garageButton: null,\r\n  winnersButton: null,\r\n  garagePage: null,\r\n  winnersPage: null,\r\n  previousPageButton: null,\r\n  nextPageButton: null,\r\n  carsContainer: null,\r\n  garagePagesCounter: null,\r\n  winnersContainer: null,\r\n  winnersPageCounter: null,\r\n  winnersTotalCount: null,\r\n};\r\n\r\nexport default appElements;\r\n","import { renderWinningMessage } from './UI';\r\nimport state from './app-state';\r\nimport appElements from './app-elements';\r\n\r\nconst getRandomNumber = (\r\n  item: string | string[],\r\n): number => Math.floor(Math.random() * item.length);\r\n\r\nconst showWinningMessage = (name: string, time: number): HTMLElement => {\r\n  const root = document.getElementById('body');\r\n  const message = renderWinningMessage(name, time);\r\n  root?.append(message);\r\n  return message;\r\n};\r\n\r\nexport const getRandomColor = (): string => {\r\n  const hexadecimal = '0123456789ABCDEF';\r\n  let color = '#';\r\n\r\n  for (let i = 0; i < 6; i += 1) {\r\n    const randomIndex = getRandomNumber(hexadecimal);\r\n    color += hexadecimal[randomIndex];\r\n  }\r\n\r\n  return color;\r\n};\r\n\r\nexport const getRandomCarName = (): string => {\r\n  const brandOption = state.carsBrands[getRandomNumber(state.carsBrands)];\r\n  const modelOption = state.carsModels[getRandomNumber(state.carsModels)];\r\n  return `${brandOption} ${modelOption}`;\r\n};\r\n\r\nexport const handleAnimationEnd = (id: number, duration: number): void => {\r\n  state.raceWinnerId = id;\r\n\r\n  const winnerCar = document.getElementById(`car-name-${id}`);\r\n  const winnerTime = +(duration / 1000).toFixed(2);\r\n  const winnreName = winnerCar?.innerText || '';\r\n\r\n  const message = showWinningMessage(winnreName, winnerTime);\r\n  window.addEventListener('click', () => message.remove());\r\n};\r\n\r\nexport const initAppElements = (): void => {\r\n  appElements.raceButton = document.getElementById('button-race');\r\n  appElements.resetButton = document.getElementById('button-reset');\r\n  appElements.root = document.getElementById('body');\r\n  appElements.sortByWinsButton = document.getElementById('sort-by-wins');\r\n  appElements.sortByTimeButton = document.getElementById('sort-by-time');\r\n  appElements.createButton = document.getElementById('button-create');\r\n  appElements.createModelInput = document.getElementById('create-model');\r\n  appElements.createColorInput = document.getElementById('create-color');\r\n  appElements.carsCounter = document.getElementById('garage-cars-count');\r\n  appElements.updateButton = document.getElementById('button-update');\r\n  appElements.updateModelInput = document.getElementById('update-model');\r\n  appElements.updateColorInput = document.getElementById('update-color');\r\n  appElements.generateButton = document.getElementById('button-generate');\r\n  appElements.garageButton = document.getElementById('button-garage');\r\n  appElements.winnersButton = document.getElementById('button-winners');\r\n  appElements.garagePage = document.getElementById('garage');\r\n  appElements.winnersPage = document.getElementById('winners');\r\n  appElements.previousPageButton = document.getElementById('button-prev');\r\n  appElements.nextPageButton = document.getElementById('button-next');\r\n  appElements.carsContainer = document.getElementById('cars');\r\n  appElements.garagePagesCounter = document.getElementById('garage-page-count');\r\n  appElements.winnersPageCounter = document.getElementById('winners-page-count');\r\n  appElements.winnersContainer = document.getElementById('winning-cars');\r\n  appElements.winnersTotalCount = document.getElementById('winners-total-count');\r\n};\r\n\r\nexport const disableElement = (element: HTMLElement | null): void => {\r\n  element?.classList.add('disabled');\r\n  element?.setAttribute('disabled', '');\r\n};\r\n\r\nexport const activateElement = (element: HTMLElement | null): void => {\r\n  element?.classList.remove('disabled');\r\n  element?.removeAttribute('disabled');\r\n};\r\n\r\nexport const setAppropriateButtonStats = (\r\n  button: HTMLElement | null,\r\n  isAddition: boolean,\r\n): void => {\r\n  isAddition ? disableElement(button) : activateElement(button);\r\n};\r\n","import state from './app-state';\r\nimport { getCars, getWinners } from './app-render';\r\nimport appElements from './app-elements';\r\nimport { setAppropriateButtonStats } from './utils';\r\n\r\nconst setToTheStateObject = (): void => {\r\n  const isPrevActive = !appElements.previousPageButton?.hasAttribute('disabled');\r\n  const isNextActive = !appElements.nextPageButton?.hasAttribute('disabled');\r\n\r\n  state.paginationButtonsState.prevIsActive = isPrevActive;\r\n  state.paginationButtonsState.nextIsActive = isNextActive;\r\n};\r\n\r\nconst handleGaragePaginationButtonClick = async (isForward: boolean): Promise<void> => {\r\n  isForward ? state.currentGaragePage += 1 : state.currentGaragePage -= 1;\r\n  const { cars } = await getCars(state.currentGaragePage);\r\n\r\n  if (appElements.carsContainer && cars) {\r\n    appElements.carsContainer.innerHTML = cars?.join('');\r\n  }\r\n};\r\n\r\nconst handleWinnersPaginationButtonClick = async (isForward: boolean): Promise<void> => {\r\n  isForward ? state.currentWinnersPage += 1 : state.currentWinnersPage -= 1;\r\n  const { winners } = await getWinners(state.currentWinnersPage);\r\n  if (appElements.winnersContainer && winners) {\r\n    appElements.winnersContainer.innerHTML = winners?.join('');\r\n  }\r\n};\r\n\r\nconst updatePaginationButtonsState = (): void => {\r\n  const isGaragePage = state.currentPage === 'garage';\r\n  const elementsAtAll = isGaragePage ? state.carsInGarage : state.winnersAtAll;\r\n  const elementsPerPageLimit = isGaragePage ? state.carsPerPageLimit : state.winnersPerPageLimit;\r\n  const pageNumber = isGaragePage ? state.currentGaragePage : state.currentWinnersPage;\r\n  const lastPage = Math.ceil(elementsAtAll / elementsPerPageLimit);\r\n\r\n  if (pageNumber === 1) {\r\n    setAppropriateButtonStats(appElements.previousPageButton, true);\r\n    elementsAtAll <= elementsPerPageLimit\r\n      ? setAppropriateButtonStats(appElements.nextPageButton, true)\r\n      : setAppropriateButtonStats(appElements.nextPageButton, false);\r\n  } else {\r\n    setAppropriateButtonStats(appElements.previousPageButton, false);\r\n    pageNumber < lastPage\r\n      ? setAppropriateButtonStats(appElements.nextPageButton, false)\r\n      : setAppropriateButtonStats(appElements.nextPageButton, true);\r\n  }\r\n\r\n  setToTheStateObject();\r\n\r\n  if (state.isRace && isGaragePage) {\r\n    setAppropriateButtonStats(appElements.previousPageButton, true);\r\n    setAppropriateButtonStats(appElements.nextPageButton, true);\r\n  }\r\n};\r\n\r\nconst handlePaginationsButtonClick = async (isPrev: boolean): Promise<void> => {\r\n  if (state.currentPage === 'garage' && appElements.carsContainer) {\r\n    await handleGaragePaginationButtonClick(isPrev);\r\n    if (appElements.garagePagesCounter) {\r\n      appElements.garagePagesCounter.innerHTML = `${state.currentGaragePage}`;\r\n    }\r\n  }\r\n\r\n  if (state.currentPage === 'winners') {\r\n    await handleWinnersPaginationButtonClick(isPrev);\r\n    if (appElements.winnersPageCounter) {\r\n      appElements.winnersPageCounter.innerHTML = `${state.currentWinnersPage}`;\r\n    }\r\n  }\r\n\r\n  updatePaginationButtonsState();\r\n};\r\n\r\nconst addListenersOnPaginationButtons = (): void => {\r\n  appElements.previousPageButton?.addEventListener('click', async () => {\r\n    await handlePaginationsButtonClick(false);\r\n  });\r\n\r\n  appElements.nextPageButton?.addEventListener('click', async () => {\r\n    await handlePaginationsButtonClick(true);\r\n  });\r\n};\r\n\r\nexport {\r\n  addListenersOnPaginationButtons,\r\n  updatePaginationButtonsState,\r\n  setToTheStateObject,\r\n};\r\n","import state from './app-state';\r\nimport { updatePaginationButtonsState } from './pagination';\r\nimport appElements from './app-elements';\r\n\r\nconst changePage = (): void => {\r\n  appElements.garageButton?.addEventListener('click', () => {\r\n    if (appElements.garagePage) appElements.garagePage.style.display = 'block';\r\n    if (appElements.winnersPage) appElements.winnersPage.style.display = 'none';\r\n\r\n    appElements.garageButton?.classList.add('active');\r\n    appElements.winnersButton?.classList.remove('active');\r\n    state.currentPage = 'garage';\r\n    updatePaginationButtonsState();\r\n  });\r\n\r\n  appElements.winnersButton?.addEventListener('click', () => {\r\n    if (appElements.winnersPage) appElements.winnersPage.style.display = 'block';\r\n    if (appElements.garagePage) appElements.garagePage.style.display = 'none';\r\n\r\n    appElements.winnersButton?.classList.add('active');\r\n    appElements.garageButton?.classList.remove('active');\r\n    state.currentPage = 'winners';\r\n    updatePaginationButtonsState();\r\n  });\r\n};\r\n\r\nexport default changePage;\r\n","import {\r\n  createCar as createCarAPI,\r\n  updateCar as updateCarAPI,\r\n  deleteCar as deleteCarAPI,\r\n  deleteWinner as deleteWinnerAPI,\r\n  getWinners as getWinnersAPI,\r\n} from './api';\r\nimport {\r\n  getRandomColor,\r\n  getRandomCarName,\r\n  disableElement,\r\n  activateElement,\r\n} from './utils';\r\nimport { renderTrackCar, getCarImage } from './UI';\r\nimport { getCars, getWinners } from './app-render';\r\nimport state from './app-state';\r\nimport { updatePaginationButtonsState } from './pagination';\r\nimport appElements from './app-elements';\r\n\r\nconst getCarAttributes = async (name: string, color: string): Promise<{\r\n  carName: string | undefined;\r\n  carColor: string | undefined;\r\n  id: number | undefined;\r\n}> => {\r\n  const response = await createCarAPI({ name, color });\r\n  const carName = response?.name;\r\n  const carColor = response?.color;\r\n  const id = response?.id;\r\n  return {\r\n    carName,\r\n    carColor,\r\n    id,\r\n  };\r\n};\r\n\r\nconst updateButtonView = (input: HTMLElement, button: HTMLElement): void => {\r\n  if (!(input instanceof HTMLInputElement)) return;\r\n  if (!input.value) disableElement(button);\r\n  if (input.value) activateElement(button);\r\n};\r\n\r\nconst updateButtonState = (input: HTMLElement, button: HTMLElement): void => {\r\n  input.addEventListener('focus', () => updateButtonView(input, button));\r\n  input.addEventListener('input', () => updateButtonView(input, button));\r\n  input.addEventListener('focusout', () => updateButtonView(input, button));\r\n  button.addEventListener('click', () => disableElement(button));\r\n};\r\n\r\nconst renderCarView = async (name: string, color: string, limit: number): Promise<void> => {\r\n  const carAttributes = await getCarAttributes(name, color);\r\n  const { id, carName, carColor } = carAttributes;\r\n\r\n  let car = '';\r\n\r\n  if (id && carName && carColor && state.carsInGarage < limit) {\r\n    car = renderTrackCar(id, carName, carColor);\r\n    state.carsOnPage.push({ name, color, id });\r\n  }\r\n\r\n  if (appElements.carsContainer && state.carsInGarage < limit) {\r\n    appElements.carsContainer.innerHTML += car;\r\n  }\r\n\r\n  if (appElements.carsCounter) {\r\n    appElements.carsCounter.innerText = `${state.carsInGarage += 1}`;\r\n  }\r\n};\r\n\r\nconst handleCreateCarButtonClick = async (e: Event): Promise<void> => {\r\n  e.preventDefault();\r\n  state.carsInGarage = Number(appElements.carsCounter?.innerHTML);\r\n\r\n  const pageNumber = Number(appElements.garagePagesCounter?.innerHTML);\r\n  const currentPageCarLimit = state.carsPerPageLimit * pageNumber;\r\n  let name = '';\r\n  let color = '';\r\n\r\n  if (appElements.createModelInput instanceof HTMLInputElement) {\r\n    name = appElements.createModelInput.value;\r\n    appElements.createModelInput.value = '';\r\n  }\r\n\r\n  if (appElements.createColorInput instanceof HTMLInputElement) {\r\n    color = appElements.createColorInput?.value;\r\n  }\r\n\r\n  await renderCarView(name, color, currentPageCarLimit);\r\n  updatePaginationButtonsState();\r\n};\r\n\r\nconst createCar = (): void => {\r\n  if (appElements.createModelInput && appElements.createButton) {\r\n    updateButtonState(appElements.createModelInput, appElements.createButton);\r\n  }\r\n\r\n  appElements.createButton?.addEventListener('click', (e) => handleCreateCarButtonClick(e));\r\n};\r\n\r\nconst changeUpdateControlsView = (isOn = false): void => {\r\n  const inputElementsToUpdate = [appElements.updateModelInput, appElements.updateColorInput];\r\n\r\n  if (!isOn) {\r\n    inputElementsToUpdate.forEach((item) => {\r\n      activateElement(item);\r\n    });\r\n\r\n    if (appElements.updateModelInput && appElements.updateButton) {\r\n      updateButtonState(appElements.updateModelInput, appElements.updateButton);\r\n    }\r\n  } else {\r\n    inputElementsToUpdate.forEach((item) => {\r\n      disableElement(item);\r\n    });\r\n\r\n    if (appElements.updateModelInput instanceof HTMLInputElement) {\r\n      appElements.updateModelInput.value = '';\r\n    }\r\n\r\n    if (appElements.updateButton) disableElement(appElements.updateButton);\r\n  }\r\n};\r\n\r\nconst deleteActiveClass = (): void => {\r\n  const buttons = document.querySelectorAll('.garage__button-options');\r\n  buttons.forEach((button) => button.classList.remove('active'));\r\n};\r\n\r\nconst updateWinnerView = (name: string, color: string): void => {\r\n  const winner = document.getElementById(`winner-${state.selectedCarId}`);\r\n  const carImageIndex = 1;\r\n  const carNameIndex = 2;\r\n\r\n  if (winner) {\r\n    winner.children[carImageIndex].innerHTML = getCarImage(color);\r\n    winner.children[carNameIndex].innerHTML = name;\r\n  }\r\n};\r\n\r\nconst updateCar = async (): Promise<void> => {\r\n  let name = '';\r\n  let color = '';\r\n\r\n  if (appElements.updateModelInput instanceof HTMLInputElement) {\r\n    name = appElements.updateModelInput.value;\r\n    appElements.updateModelInput.value = '';\r\n  }\r\n\r\n  if (appElements.updateColorInput instanceof HTMLInputElement) {\r\n    color = appElements.updateColorInput?.value;\r\n  }\r\n\r\n  await updateCarAPI(state.selectedCarId, { name, color });\r\n\r\n  const carNameElement = document.getElementById(`car-name-${state.selectedCarId}`);\r\n  const carElement = document.getElementById(`car-${state.selectedCarId}`);\r\n\r\n  if (carNameElement) carNameElement.textContent = name;\r\n  if (carElement) carElement.innerHTML = getCarImage(color);\r\n\r\n  updateWinnerView(name, color);\r\n};\r\n\r\nconst deleteWinner = async (page: number, isOnPage: boolean): Promise<void> => {\r\n  await deleteWinnerAPI(state.selectedCarId);\r\n\r\n  if (!isOnPage) return;\r\n\r\n  const { winners, count: winnersCount } = await getWinners(page);\r\n  state.winnersAtAll = winnersCount || 0;\r\n\r\n  if (appElements.winnersTotalCount) {\r\n    appElements.winnersTotalCount.innerHTML = `${state.winnersAtAll}`;\r\n  }\r\n\r\n  if (appElements.winnersContainer) {\r\n    appElements.winnersContainer.innerHTML = winners.join('');\r\n  }\r\n};\r\n\r\nconst deleteCar = async (): Promise<void> => {\r\n  state.currentGaragePage = Number(appElements.garagePagesCounter?.innerHTML);\r\n  state.currentWinnersPage = Number(appElements.winnersPageCounter?.innerHTML);\r\n\r\n  const winnersResponse = await getWinnersAPI(state.currentWinnersPage, state.sortBy, state.order);\r\n  const winnersId = winnersResponse?.winners.map((winner) => winner.id);\r\n  const isWinnerOnCurrentPage = winnersId?.includes(state.selectedCarId);\r\n  const trackCar = document.getElementById(`track-car-${state.selectedCarId}`);\r\n  state.carsInGarage = Number(appElements.carsCounter?.innerHTML);\r\n\r\n  await deleteCarAPI(state.selectedCarId);\r\n  await deleteWinner(state.currentWinnersPage, !!isWinnerOnCurrentPage);\r\n\r\n  if (trackCar) trackCar.remove();\r\n\r\n  if (appElements.carsCounter) {\r\n    appElements.carsCounter.innerText = `${state.carsInGarage -= 1}`;\r\n  }\r\n\r\n  if (state.carsInGarage >= state.carsPerPageLimit) {\r\n    const { cars } = await getCars(state.currentGaragePage);\r\n\r\n    if (appElements.carsContainer && cars) {\r\n      appElements.carsContainer.innerHTML = cars?.join('');\r\n    }\r\n  }\r\n\r\n  changeUpdateControlsView(true);\r\n  updatePaginationButtonsState();\r\n};\r\n\r\nconst handleUpdateButtonClick = (): void => {\r\n  appElements.updateButton?.addEventListener('click', () => updateCar());\r\n\r\n  appElements.carsContainer?.addEventListener('click', (e) => {\r\n    const { target } = e;\r\n    let targetId = '';\r\n\r\n    if (target instanceof HTMLButtonElement) {\r\n      targetId = target.id;\r\n      state.selectedCarId = Number(targetId.slice(targetId.lastIndexOf('-') + 1));\r\n    }\r\n\r\n    if (targetId.match('button-select') && target instanceof HTMLElement) {\r\n      if (target.classList.contains('active')) {\r\n        target.classList.remove('active');\r\n        changeUpdateControlsView(true);\r\n        state.selectedCarId = 0;\r\n      } else {\r\n        deleteActiveClass();\r\n        target.classList.add('active');\r\n        changeUpdateControlsView();\r\n      }\r\n    }\r\n\r\n    if (targetId.match('button-remove')) void deleteCar();\r\n  });\r\n};\r\n\r\nconst generaterandomCars = async (): Promise<void> => {\r\n  const carsToGenerate = 100;\r\n  state.carsInGarage = Number(appElements.carsCounter?.innerHTML);\r\n  const pageNumber = Number(appElements.garagePagesCounter?.innerHTML);\r\n  const currentPageCarLimit = state.carsPerPageLimit * pageNumber;\r\n  const cars: string[] = [];\r\n  const generatedCars: Promise<void>[] = [];\r\n\r\n  for (let i = 0; i < carsToGenerate; i += 1) {\r\n    cars.push(getRandomCarName());\r\n  }\r\n\r\n  cars.forEach((car) => {\r\n    const color = getRandomColor();\r\n    generatedCars.push(renderCarView(car, color, currentPageCarLimit));\r\n  });\r\n\r\n  await Promise.all(generatedCars);\r\n  updatePaginationButtonsState();\r\n};\r\n\r\nconst handleGenerateButtonClick = (): void => {\r\n  appElements.generateButton?.addEventListener('click', () => generaterandomCars());\r\n};\r\n\r\nexport {\r\n  handleUpdateButtonClick,\r\n  createCar,\r\n  handleGenerateButtonClick,\r\n};\r\n","import { getWinner, updateWinner, createwinner } from './api';\r\nimport { getWinners } from './app-render';\r\nimport state from './app-state';\r\nimport { updatePaginationButtonsState } from './pagination';\r\nimport appElements from './app-elements';\r\n\r\nconst updateWinnersView = async (): Promise<void> => {\r\n  const { winners, count: winnersCount } = await getWinners(state.currentWinnersPage);\r\n\r\n  state.winnersAtAll = winnersCount || 0;\r\n  if (appElements.winnersTotalCount) {\r\n    appElements.winnersTotalCount.innerHTML = `${state.winnersAtAll}`;\r\n  }\r\n\r\n  if (appElements.winnersContainer && winners) {\r\n    appElements.winnersContainer.innerHTML = winners?.join('');\r\n  }\r\n\r\n  updatePaginationButtonsState();\r\n};\r\n\r\nconst handleRaceResults = async (id: number, duration: number): Promise<void> => {\r\n  const response = await getWinner(id);\r\n  const currentTime = +(duration / 1000).toFixed(2);\r\n\r\n  if (response) {\r\n    const body = {\r\n      wins: response.wins += 1,\r\n      time: Math.min(response.time, currentTime),\r\n    };\r\n\r\n    await updateWinner(id, body);\r\n  } else {\r\n    const body = {\r\n      wins: 1,\r\n      time: currentTime,\r\n      id,\r\n    };\r\n\r\n    await createwinner(body);\r\n  }\r\n\r\n  await updateWinnersView();\r\n};\r\n\r\nconst handleWinnersButtonClick = (): void => {\r\n  appElements.sortByWinsButton?.addEventListener('click', async () => {\r\n    state.sortBy = 'wins';\r\n    state.winsOrder = state.winsOrder === 'ASC' ? 'DESC' : 'ASC';\r\n    state.order = state.winsOrder;\r\n    await updateWinnersView();\r\n  });\r\n\r\n  appElements.sortByTimeButton?.addEventListener('click', async () => {\r\n    state.sortBy = 'time';\r\n\r\n    state.timeOrder = state.timeOrder === 'ASC' ? 'DESC' : 'ASC';\r\n    state.order = state.timeOrder;\r\n    await updateWinnersView();\r\n  });\r\n};\r\n\r\nexport { handleRaceResults, handleWinnersButtonClick };\r\n","import * as API from './api';\r\nimport state from './app-state';\r\nimport { handleAnimationEnd, disableElement, activateElement } from './utils';\r\nimport { handleRaceResults } from './winners-table';\r\nimport appElements from './app-elements';\r\n\r\nconst updateEngineButtonsView = (target: HTMLElement, isStart: boolean, id: number): void => {\r\n  const secondButton = isStart\r\n    ? document.getElementById(`stop-engine-car-${id}`)\r\n    : document.getElementById(`start-engine-car-${id}`);\r\n\r\n  const removeButton = document.getElementById(`button-remove-${id}`);\r\n\r\n  isStart ? disableElement(removeButton) : activateElement(removeButton);\r\n\r\n  disableElement(target);\r\n  activateElement(secondButton);\r\n};\r\n\r\nconst getRaceParams = async (id: number): Promise<{\r\n  velocity: number | undefined;\r\n  distance: number | undefined;\r\n}> => {\r\n  const response = await API.startEngine(id);\r\n  const velocity = response?.velocity;\r\n  const distance = response?.distance;\r\n  return { velocity, distance };\r\n};\r\n\r\nconst startCarMovementAnimation = (duration: number, id: number, car: HTMLElement): void => {\r\n  const carToAnimate = car;\r\n  const finishFlag = document.getElementById(`flag-${id}`);\r\n  const carOffset = carToAnimate?.offsetLeft;\r\n  const flagOffset = finishFlag?.offsetLeft;\r\n  const flagWidth = finishFlag?.clientWidth;\r\n  const start = performance.now();\r\n\r\n  const animate = async (time: number): Promise<void> => {\r\n    let timeFraction = ((time - start) / duration) ** 2;\r\n    let trackWidth = 0;\r\n\r\n    if (timeFraction > 1) timeFraction = 1;\r\n    if (flagOffset && carOffset && flagWidth) trackWidth = flagOffset + flagWidth - carOffset;\r\n\r\n    const progress = timeFraction * trackWidth;\r\n\r\n    if (carToAnimate) carToAnimate.style.transform = `translateX(${progress}px)`;\r\n\r\n    if (timeFraction < 1) {\r\n      state.carsAnimationId[`${id}`] = window.requestAnimationFrame(animate);\r\n    } else if (!state.raceWinnerId && state.isRace) {\r\n      handleAnimationEnd(id, duration);\r\n      await handleRaceResults(id, duration);\r\n    }\r\n  };\r\n\r\n  state.carsAnimationId[`${id}`] = window.requestAnimationFrame(animate);\r\n};\r\n\r\nconst handleEngineButtonsClick = (): void => {\r\n  appElements.carsContainer?.addEventListener('click', async (e) => {\r\n    const { target } = e;\r\n    let targetIdAttribute = '';\r\n    let id = 0;\r\n\r\n    if (!(target instanceof HTMLButtonElement)) return;\r\n\r\n    targetIdAttribute = target.id;\r\n    id = Number(targetIdAttribute.slice(targetIdAttribute.lastIndexOf('-') + 1));\r\n    const carToAnimate = document.getElementById(`car-${id}`);\r\n\r\n    if (!carToAnimate) return;\r\n\r\n    if (targetIdAttribute.match('start-engine-car')) {\r\n      state.isRace = false;\r\n      updateEngineButtonsView(target, true, id);\r\n      const { velocity, distance } = await getRaceParams(id);\r\n      const rideDuration = (distance || 0) / (velocity || 0);\r\n      startCarMovementAnimation(rideDuration, id, carToAnimate);\r\n      const engineStatus = await API.switchEngineToDriveMode(id);\r\n\r\n      if (!engineStatus?.success) window.cancelAnimationFrame(state.carsAnimationId[`${id}`]);\r\n    }\r\n\r\n    if (targetIdAttribute.match('stop-engine-car')) {\r\n      await API.stopEngine(id);\r\n      updateEngineButtonsView(target, false, id);\r\n      window.cancelAnimationFrame(state.carsAnimationId[`${id}`]);\r\n      carToAnimate.style.transform = 'translateX(0px)';\r\n    }\r\n  });\r\n};\r\n\r\nexport {\r\n  handleEngineButtonsClick,\r\n  getRaceParams,\r\n  startCarMovementAnimation,\r\n  updateEngineButtonsView,\r\n};\r\n","import state from './app-state';\r\nimport IEngine from './interfaces/IEngine';\r\nimport { getRaceParams, startCarMovementAnimation, updateEngineButtonsView } from './engine-controls';\r\nimport { switchEngineToDriveMode, stopEngine } from './api';\r\nimport appElements from './app-elements';\r\nimport { disableElement, activateElement, setAppropriateButtonStats } from './utils';\r\n\r\nconst updateRaceButtonsView = (firstButton: HTMLElement, secondButton: HTMLElement): void => {\r\n  setAppropriateButtonStats(firstButton, false);\r\n  setAppropriateButtonStats(secondButton, true);\r\n\r\n  appElements.generateButton?.classList.toggle('disabled');\r\n\r\n  appElements.generateButton?.hasAttribute('disabled')\r\n    ? appElements.generateButton.removeAttribute('disabled')\r\n    : appElements.generateButton?.setAttribute('disabled', '');\r\n};\r\n\r\nconst stopAllEngines = async (): Promise<void> => {\r\n  const enginesToStop: Promise<IEngine | null>[] = [];\r\n\r\n  state.isRace = false;\r\n  state.carsOnPage.forEach((car) => enginesToStop.push(stopEngine(car.id)));\r\n\r\n  await Promise.all(enginesToStop);\r\n\r\n  state.carsOnPage.forEach((car) => {\r\n    const carToAnimate = document.getElementById(`car-${car.id}`);\r\n    const stopEngineButton = document.getElementById(`stop-engine-car-${car.id}`);\r\n\r\n    if (stopEngineButton) updateEngineButtonsView(stopEngineButton, false, car.id);\r\n    window.cancelAnimationFrame(state.carsAnimationId[`${car.id}`]);\r\n    if (carToAnimate) carToAnimate.style.transform = 'translateX(0px)';\r\n  });\r\n};\r\n\r\nconst changeCarsTrackButtonView = (): void => {\r\n  const carsIds = state.carsOnPage.map((car) => car.id);\r\n  carsIds.forEach((id) => {\r\n    const startEngineButton = document.getElementById(`start-engine-car-${id}`);\r\n    if (startEngineButton) updateEngineButtonsView(startEngineButton, true, id);\r\n  });\r\n};\r\n\r\nconst launchAllEngines = async (): Promise<void> => {\r\n  await stopAllEngines();\r\n  changeCarsTrackButtonView();\r\n\r\n  state.isRace = true;\r\n  state.raceWinnerId = 0;\r\n\r\n  const generatedCars: Promise<\r\n    { velocity: number | undefined; distance: number | undefined; }>[] = [];\r\n\r\n  state.carsOnPage.forEach((car) => generatedCars.push(getRaceParams(car.id)));\r\n\r\n  await Promise.all(generatedCars);\r\n\r\n  const rideDuration = generatedCars.map(async (params) => {\r\n    const { velocity, distance } = await params;\r\n    return (distance || 0) / (velocity || 0);\r\n  });\r\n\r\n  state.carsOnPage.forEach(async (car, i) => {\r\n    const carToAnimate = document.getElementById(`car-${car.id}`);\r\n    const time = await rideDuration[i];\r\n\r\n    if (carToAnimate) startCarMovementAnimation(time, car.id, carToAnimate);\r\n\r\n    const engineStatus = await switchEngineToDriveMode(car.id);\r\n\r\n    if (!engineStatus?.success) {\r\n      window.cancelAnimationFrame(state.carsAnimationId[`${car.id}`]);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleRaceButtonClick = (): void => {\r\n  appElements.raceButton?.addEventListener('click', async () => {\r\n    if (!appElements.resetButton) return;\r\n\r\n    if (appElements.raceButton) {\r\n      updateRaceButtonsView(appElements.resetButton, appElements.raceButton);\r\n      setAppropriateButtonStats(appElements.resetButton, true);\r\n    }\r\n\r\n    if (appElements.createButton) {\r\n      setAppropriateButtonStats(appElements.createButton, true);\r\n    }\r\n\r\n    if (appElements.createModelInput) {\r\n      disableElement(appElements.createModelInput);\r\n    }\r\n\r\n    if (appElements.previousPageButton && appElements.nextPageButton) {\r\n      disableElement(appElements.previousPageButton);\r\n      disableElement(appElements.nextPageButton);\r\n    }\r\n\r\n    changeCarsTrackButtonView();\r\n    await launchAllEngines();\r\n    setAppropriateButtonStats(appElements.resetButton, false);\r\n  });\r\n};\r\n\r\nconst handleResetButtonClick = (): void => {\r\n  appElements.resetButton?.addEventListener('click', async () => {\r\n    await stopAllEngines();\r\n\r\n    if (!(appElements.createModelInput instanceof HTMLInputElement)) return;\r\n\r\n    if (appElements.resetButton && appElements.raceButton) {\r\n      updateRaceButtonsView(appElements.raceButton, appElements.resetButton);\r\n    }\r\n\r\n    if (state.paginationButtonsState.prevIsActive && appElements.previousPageButton) {\r\n      activateElement(appElements.previousPageButton);\r\n    }\r\n\r\n    if (state.paginationButtonsState.nextIsActive && appElements.nextPageButton) {\r\n      activateElement(appElements.nextPageButton);\r\n    }\r\n\r\n    if (appElements.createButton && appElements.createModelInput.value) {\r\n      setAppropriateButtonStats(appElements.createButton, false);\r\n    }\r\n\r\n    activateElement(appElements.createModelInput);\r\n  });\r\n};\r\n\r\nexport { handleRaceButtonClick, handleResetButtonClick };\r\n","import './style.scss';\r\nimport changePage from './components/pages-controls';\r\nimport { renderApp } from './components/app-render';\r\nimport {\r\n  addListenersOnPaginationButtons,\r\n  updatePaginationButtonsState,\r\n  setToTheStateObject,\r\n} from './components/pagination';\r\nimport { createCar, handleUpdateButtonClick, handleGenerateButtonClick } from './components/car-manager';\r\nimport { handleEngineButtonsClick } from './components/engine-controls';\r\nimport { handleRaceButtonClick, handleResetButtonClick } from './components/race-controls';\r\nimport { handleWinnersButtonClick } from './components/winners-table';\r\nimport { initAppElements } from './components/utils';\r\n\r\nconst initApp = async () => {\r\n  await renderApp(1);\r\n  initAppElements();\r\n  changePage();\r\n  createCar();\r\n  setToTheStateObject();\r\n  handleUpdateButtonClick();\r\n  handleGenerateButtonClick();\r\n  addListenersOnPaginationButtons();\r\n  updatePaginationButtonsState();\r\n  handleEngineButtonsClick();\r\n  handleRaceButtonClick();\r\n  handleResetButtonClick();\r\n  handleWinnersButtonClick();\r\n};\r\n\r\nvoid initApp();\r\n"],"names":["carsBrands","carsModels","carsInGarage","winnersAtAll","carsPerPageLimit","winnersPerPageLimit","selectedCarId","currentGaragePage","currentWinnersPage","currentPage","carsAnimationId","carsOnPage","raceWinnerId","isRace","paginationButtonsState","prevIsActive","nextIsActive","sortBy","order","winsOrder","timeOrder","BASE_URL","GARAGE","ENGINE","WINNERS","stopEngine","id","response","fetch","method","data","json","status","error","Error","message","switchEngineToDriveMode","success","getWinners","page","sort","limit","winners","winnersCount","headers","get","count","Number","getCarImage","color","renderTrackCar","name","garageStats","queryURL","cars","carsCount","map","car","winnersStats","winnersResponse","winner","i","image","position","wins","time","winnersItems","Promise","all","raceButton","resetButton","generateButton","root","sortByWinsButton","sortByTimeButton","createButton","createModelInput","createColorInput","carsCounter","updateButton","updateModelInput","updateColorInput","garageButton","winnersButton","garagePage","winnersPage","previousPageButton","nextPageButton","carsContainer","garagePagesCounter","winnersContainer","winnersPageCounter","winnersTotalCount","getRandomNumber","item","Math","floor","random","length","disableElement","element","classList","add","setAttribute","activateElement","remove","removeAttribute","setAppropriateButtonStats","button","isAddition","setToTheStateObject","isPrevActive","hasAttribute","isNextActive","updatePaginationButtonsState","isGaragePage","elementsAtAll","elementsPerPageLimit","pageNumber","lastPage","ceil","handlePaginationsButtonClick","isPrev","isForward","join","handleWinnersPaginationButtonClick","updateButtonView","input","HTMLInputElement","value","updateButtonState","addEventListener","renderCarView","carAttributes","body","JSON","stringify","carName","carColor","getCarAttributes","changeUpdateControlsView","isOn","inputElementsToUpdate","forEach","innerHTML","winnersId","isWinnerOnCurrentPage","includes","trackCar","document","getElementById","isOnPage","handleUpdateButtonClick","carNameElement","carElement","textContent","children","updateWinnerView","e","target","targetId","HTMLButtonElement","slice","lastIndexOf","match","HTMLElement","contains","querySelectorAll","updateWinnersView","updateEngineButtonsView","isStart","secondButton","removeButton","getRaceParams","velocity","distance","startCarMovementAnimation","duration","carToAnimate","finishFlag","carOffset","offsetLeft","flagOffset","flagWidth","clientWidth","start","performance","now","animate","timeFraction","trackWidth","progress","style","transform","window","requestAnimationFrame","winnerCar","winnerTime","toFixed","createElement","renderWinningMessage","append","showWinningMessage","innerText","handleAnimationEnd","getWinner","currentTime","min","updateWinner","createwinner","handleRaceResults","updateRaceButtonsView","firstButton","toggle","stopAllEngines","enginesToStop","push","stopEngineButton","cancelAnimationFrame","changeCarsTrackButtonView","startEngineButton","garageView","garageTrack","carsAtAll","getGarageContent","winnersView","getWinnersContent","rootElement","content","concat","renderApp","preventDefault","currentPageCarLimit","handleCreateCarButtonClick","generatedCars","hexadecimal","getRandomColor","addListenersOnPaginationButtons","targetIdAttribute","engineStatus","handleEngineButtonsClick","rideDuration","params","handleRaceButtonClick","handleResetButtonClick","handleWinnersButtonClick"],"sourceRoot":""}